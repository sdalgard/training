/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIFEnder
 **/
public class PIFEnder extends Component implements IPIFEnder_from_starter {

private Collection<IPIFEnder_to_starterClient> to_starter_clients = Collections.synchronizedCollection(new LinkedList<IPIFEnder_to_starterClient>());
public synchronized void registerOnTo_starter(IPIFEnder_to_starterClient client){
to_starter_clients.add(client);
}

public synchronized void unregisterFromTo_starter(IPIFEnder_to_starterClient client){
to_starter_clients.remove(client);
}

private Collection<IPIFEnder_PrintClient> Print_clients = Collections.synchronizedCollection(new LinkedList<IPIFEnder_PrintClient>());
public synchronized void registerOnPrint(IPIFEnder_PrintClient client){
Print_clients.add(client);
}

public synchronized void unregisterFromPrint(IPIFEnder_PrintClient client){
Print_clients.remove(client);
}

@Override
public synchronized void pif_token_via_from_starter(short PrintIncForwardMsgs_pif_token_token__var){
receive(pif_tokenType.instantiate(from_starter_port, PrintIncForwardMsgs_pif_token_token__var), from_starter_port);
}

private void sendPif_token_via_to_starter(short PrintIncForwardMsgs_pif_token_token__var){
//ThingML send
send(pif_tokenType.instantiate(to_starter_port, PrintIncForwardMsgs_pif_token_token__var), to_starter_port);
//send to other clients
for(IPIFEnder_to_starterClient client : to_starter_clients){
client.pif_token_from_to_starter(PrintIncForwardMsgs_pif_token_token__var);
}}

private void sendCustomPrintS_via_Print(String CustomPrintMsgs_customPrintS_myString__var){
//ThingML send
send(customPrintSType.instantiate(Print_port, CustomPrintMsgs_customPrintS_myString__var), Print_port);
//send to other clients
for(IPIFEnder_PrintClient client : Print_clients){
client.customPrintS_from_Print(CustomPrintMsgs_customPrintS_myString__var);
}}

private void sendCustomPrintI_via_Print(short CustomPrintMsgs_customPrintI_myInt__var){
//ThingML send
send(customPrintIType.instantiate(Print_port, CustomPrintMsgs_customPrintI_myInt__var), Print_port);
//send to other clients
for(IPIFEnder_PrintClient client : Print_clients){
client.customPrintI_from_Print(CustomPrintMsgs_customPrintI_myInt__var);
}}

//Attributes
private short PIFEnder_behavior_tmp__var;
//Ports
private Port to_starter_port;
private Port from_starter_port;
private Port Print_port;
//Message types
protected final Pif_tokenMessageType pif_tokenType = new Pif_tokenMessageType();
public Pif_tokenMessageType getPif_tokenType(){
return pif_tokenType;
}

protected final CustomPrintSMessageType customPrintSType = new CustomPrintSMessageType();
public CustomPrintSMessageType getCustomPrintSType(){
return customPrintSType;
}

protected final CustomPrintIMessageType customPrintIType = new CustomPrintIMessageType();
public CustomPrintIMessageType getCustomPrintIType(){
return customPrintIType;
}

//Empty Constructor
public PIFEnder() {
super(3);
}

//Constructor (all attributes)
public PIFEnder(String name, final short PIFEnder_behavior_tmp__var) {
super(name, 3);
this.PIFEnder_behavior_tmp__var = PIFEnder_behavior_tmp__var;
}

//Getters and Setters for non readonly/final attributes
public short getPIFEnder_behavior_tmp__var() {
return PIFEnder_behavior_tmp__var;
}

public void setPIFEnder_behavior_tmp__var(short PIFEnder_behavior_tmp__var) {
this.PIFEnder_behavior_tmp__var = PIFEnder_behavior_tmp__var;
}

//Getters for Ports
public Port getTo_starter_port() {
return to_starter_port;
}
public Port getFrom_starter_port() {
return from_starter_port;
}
public Port getPrint_port() {
return Print_port;
}
private CompositeState buildPIFEnder_behavior(){
final List<AtomicState> states_PIFEnder_behavior = new ArrayList<AtomicState>();
final AtomicState state_PIFEnder_behavior_Init = new AtomicState("Init")
{
@Override
public void onEntry() {
sendCustomPrintS_via_Print((String) ("Ender entry Init ... "));
}

};
states_PIFEnder_behavior.add(state_PIFEnder_behavior_Init);
final List<Region> regions_PIFEnder_behavior = new ArrayList<Region>();
final List<Handler> transitions_PIFEnder_behavior = new ArrayList<Handler>();
transitions_PIFEnder_behavior.add(new Transition("Handler_22710652",pif_tokenType, from_starter_port, state_PIFEnder_behavior_Init, state_PIFEnder_behavior_Init){
@Override
public void doExecute(final Event e) {
final Pif_tokenMessageType.Pif_tokenMessage ce = (Pif_tokenMessageType.Pif_tokenMessage) e;
PIFEnder_behavior_tmp__var = (short) (ce.token);
sendCustomPrintS_via_Print((String) (" ... Ender returns token ... "));
PIFEnder_behavior_tmp__var = (short) (getPIFEnder_behavior_tmp__var() - 1);
sendPif_token_via_to_starter((short) (getPIFEnder_behavior_tmp__var()));
}

});
final CompositeState state_PIFEnder_behavior = new CompositeState("behavior", states_PIFEnder_behavior, state_PIFEnder_behavior_Init, transitions_PIFEnder_behavior, regions_PIFEnder_behavior, false);
return state_PIFEnder_behavior;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_to_starter = new ArrayList<EventType>();
final List<EventType> outEvents_to_starter = new ArrayList<EventType>();
outEvents_to_starter.add(pif_tokenType);
to_starter_port = new Port(PortType.PROVIDED, "to_starter", inEvents_to_starter, outEvents_to_starter, 0);
final List<EventType> inEvents_from_starter = new ArrayList<EventType>();
final List<EventType> outEvents_from_starter = new ArrayList<EventType>();
inEvents_from_starter.add(pif_tokenType);
from_starter_port = new Port(PortType.REQUIRED, "from_starter", inEvents_from_starter, outEvents_from_starter, 1);
final List<EventType> inEvents_Print = new ArrayList<EventType>();
final List<EventType> outEvents_Print = new ArrayList<EventType>();
outEvents_Print.add(customPrintSType);
outEvents_Print.add(customPrintIType);
Print_port = new Port(PortType.PROVIDED, "Print", inEvents_Print, outEvents_Print, 2);
//Init state machine
behavior = buildPIFEnder_behavior();
return this;
}

}
