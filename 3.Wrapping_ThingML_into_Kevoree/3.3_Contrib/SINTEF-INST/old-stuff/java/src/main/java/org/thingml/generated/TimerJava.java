/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : TimerJava
 **/
public class TimerJava extends Component  {

private void sendTimer_timeout_via_timer(){
//ThingML send
send(timer_timeoutType.instantiate(timer_port), timer_port);
}

//Attributes
private Thread TimerJava_timer__var;
//Ports
private Port timer_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
public Timer_startMessageType getTimer_startType(){
return timer_startType;
}

protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
public Timer_cancelMessageType getTimer_cancelType(){
return timer_cancelType;
}

protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
public Timer_timeoutMessageType getTimer_timeoutType(){
return timer_timeoutType;
}

//Empty Constructor
public TimerJava() {
super(1);
}

//Constructor (all attributes)
public TimerJava(String name, final Thread TimerJava_timer__var) {
super(name, 1);
this.TimerJava_timer__var = TimerJava_timer__var;
}

//Getters and Setters for non readonly/final attributes
public Thread getTimerJava_timer__var() {
return TimerJava_timer__var;
}

public void setTimerJava_timer__var(Thread TimerJava_timer__var) {
this.TimerJava_timer__var = TimerJava_timer__var;
}

//Getters for Ports
public Port getTimer_port() {
return timer_port;
}
private CompositeState buildTimerJava_SoftTimer(){
final List<AtomicState> states_TimerJava_SoftTimer = new ArrayList<AtomicState>();
final AtomicState state_TimerJava_SoftTimer_default = new AtomicState("default")
;
states_TimerJava_SoftTimer.add(state_TimerJava_SoftTimer_default);
final List<Region> regions_TimerJava_SoftTimer = new ArrayList<Region>();
final List<Handler> transitions_TimerJava_SoftTimer = new ArrayList<Handler>();
transitions_TimerJava_SoftTimer.add(new InternalTransition("start",timer_startType, timer_port, state_TimerJava_SoftTimer_default){
@Override
public boolean doCheck(final Event e) {
final Timer_startMessageType.Timer_startMessage ce = (Timer_startMessageType.Timer_startMessage) e;
return ce.delay > 0;
}

@Override
public void doExecute(final Event e) {
final Timer_startMessageType.Timer_startMessage ce = (Timer_startMessageType.Timer_startMessage) e;
if( !(getTimerJava_timer__var() == null)) {
getTimerJava_timer__var().interrupt();

}
Thread t = new Thread(){
                public void run() {
				try {
					Thread.sleep(ce.delay);
sendTimer_timeout_via_timer();
} catch (Exception ex) {
				}
				interrupt();
			    }
              };
TimerJava_timer__var = (Thread) (t);
getTimerJava_timer__var().start();
}

});
transitions_TimerJava_SoftTimer.add(new InternalTransition("cancel",timer_cancelType, timer_port, state_TimerJava_SoftTimer_default){
@Override
public void doExecute(final Event e) {
final Timer_cancelMessageType.Timer_cancelMessage ce = (Timer_cancelMessageType.Timer_cancelMessage) e;
if( !(getTimerJava_timer__var() == null)) {
getTimerJava_timer__var().interrupt();

}
}

});
final CompositeState state_TimerJava_SoftTimer = new CompositeState("SoftTimer", states_TimerJava_SoftTimer, state_TimerJava_SoftTimer_default, transitions_TimerJava_SoftTimer, regions_TimerJava_SoftTimer, false);
return state_TimerJava_SoftTimer;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_timer = new ArrayList<EventType>();
final List<EventType> outEvents_timer = new ArrayList<EventType>();
inEvents_timer.add(timer_startType);
inEvents_timer.add(timer_cancelType);
outEvents_timer.add(timer_timeoutType);
timer_port = new Port(PortType.PROVIDED, "timer", inEvents_timer, outEvents_timer, 0);
//Init state machine
behavior = buildTimerJava_SoftTimer();
return this;
}

}
